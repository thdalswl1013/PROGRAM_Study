"""
정수 X에 사용할 수 있는 연산은 다음과 같이 세 가지 이다.

X가 3으로 나누어 떨어지면, 3으로 나눈다.
X가 2로 나누어 떨어지면, 2로 나눈다.
1을 뺀다.


정수 N이 주어졌을 때, 위와 같은 연산 세 개를 적절히 사용해서 1을 만들려고 한다. 연산을 사용하는 횟수의 최솟값을 출력하시오.
"""

# DP문제 

# Bottom_Up 방식 풀이
n = int(input())
dp = [0] * (n+1) # 인덱스 숫자가 1이 되는데 필요한 연산 최소 개수

for i in range(2, n+1):
    dp[i]= dp[i-1] + 1 # 1을 빼는 연산

    if i%2==0: # 2로 나누어 떨어질 때, 2로 나누는 연산
        dp[i] = min(dp[i], dp[i//2]+1)

    if i%3==0: # 3으로 나누어 떨어질 때, 3으로 나누는 연산
        dp[i] = min(dp[i], dp[i//3]+1)

print(dp[n])


# 틀린 방법인데, 옛날에도 이렇게 풀고 지금도 이렇게 풂
"""
n=int(input())
cnt=0

while(n>1):
    if n%3==0:
        cnt+=1
        n/=3

    elif n%2==0:
        cnt+=1
        n/=2

    else:
        cnt+=1
        n-=1

print(cnt)
"""
